/**
 * Реализация алгоритма для поиска факториала числа с применением рекурсивного вызова, сложность алгоритма О(n). 
 * @param {number} num - число, для которого ищется значение факториала;
 * @returns значение факториала числа;
 */
const factorial = (num) => {
	// базовый сценарий для выхода из рекурсии
	if (num === 1) {
		return 1;
	}

	// рекурсивынй сценарий
	return num * factorial(num - 1);
}


/**
 * Реализация алгоритма для поиска суммы всех чисел в массиве с применением рекурсивного вызова, сложность алгоритма О(n). 
 * @param {Array} arr - массив чисел;
 * @returns значение суммы всех чисел массива;
 */
const recursionSum = (arr) => {
	// базовый сценарий для выхода из рекурсии
	if (arr.length === 0) {
		return 0;
	}

	// рекурсивынй сценарий
	return arr.shift() + recursionSum(arr);
}


/**
 * Реализация алгоритма для вычисления длинны массива с применением рекурсивного вызова, сложность алгоритма О(n). 
 * @param {Array} arr - массив чисел;
 * @returns значение длинны;
 */
const countLength = (arr) => {

	// базовый сценарий для выхода из рекурсии
	if (arr[0] === undefined) {
		return 0;
	}

	arr.pop();

	// рекурсивынй сценарий
	return 1 + countLength(arr);
}